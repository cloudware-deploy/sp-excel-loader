#
# encoding: utf-8
#
# Copyright (c) 2011-2023 Cloudware S.A. All rights reserved.
#
# Converts excel model to vrxml
#
# Utility program that converts a report defined in excel to vrxml report
#
# This file is part of xls2vrxml.
#
# xls2vrxml is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# xls2vrxml is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with xls2vrxml.  If not, see <http://www.gnu.org/licenses/>.
#
# encoding: utf-8
#
require 'optparse'
require 'awesome_print'

require 'xls/loader'
require 'xls/legacy/translator'

#
# Parse command line arguments
#
$args = { source: nil, destination: '.' }
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($PROGRAM_NAME)} -s<pdf.xlsx> -d<directory>"
  opts.on('-s', '--source=URI', "input to pdf.xlsx"       ) { |v| $args[:source]      = v }
  opts.on('-d', '--destination=URI', "output directory"   ) { |v| $args[:destination] = v }
end
option_parser.parse!
if nil == $args[:source]
  ::Xls::Vrxml::Log.ERROR(msg: "Missing 'source' argument!", exception: ArgumentError)
end
if ! File.exists?($args[:source])
  ::Xls::Vrxml::Log.ERROR(msg: "Invalid or missing source file '%s'!" % [ $args[:source] ], exception: ArgumentError)
end

#
# 0) Prepare
#
dst_xlsx = File.expand_path($args[:destination])
if $args[:source].include?('.pdf.xlsx')
  dst_xlsx = File.join(dst_xlsx, File.basename($args[:source]).sub('.pdf.xlsx', '.vpdf.xlsx'))
else
  dst_xlsx = File.join(dst_xlsx, File.basename($args[:source]).sub('.xlsx', '.vpdf.xlsx'))
end
dst_vrxml = dst_xlsx.sub('.vpdf.xlsx', '.vpdf.vrxml')

#
# 1) Legacy XLS -> New XLSX
#
::Xls::Vrxml::Log.STEP(msg:" ˗ Translate...".cyan)
translator = ::Xls::Legacy::Translator.new(uri: $args[:source])
translator.translate(to: dst_xlsx)

#
# 2) New XLSX -> VRXML
#
::Xls::Vrxml::Log.STEP(msg:" ˗ Convert...".cyan)
converter = ::Xls::Vrxml::Converter.new(dst_xlsx)
converter.convert(to: dst_vrxml)

::Xls::Vrxml::Log.STEP(msg: " • %s".cyan    % [ $args[:source] ])
::Xls::Vrxml::Log.STEP(msg: "   + %s".green % [ dst_xlsx ]     )
::Xls::Vrxml::Log.STEP(msg: "   + %s".green % [ dst_vrxml ]    )

# done
0
